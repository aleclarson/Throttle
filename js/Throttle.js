// Generated by CoffeeScript 1.12.4
var Type, isType, type;

isType = require("isType");

Type = require("Type");

type = Type("Throttle");

type.inherits(Function);

type.createInstance(function() {
  var self;
  return self = function() {
    return self._callEventually(this, arguments);
  };
});

type.createArgs(function(args) {
  if (isType(args[0], Number)) {
    args[0] = {
      ms: args[0],
      fn: args[1]
    };
  }
  return args;
});

type.defineArgs(function() {
  return {
    required: true,
    types: {
      ms: Number,
      fn: Function.Kind,
      runEventually: Boolean
    },
    defaults: {
      runEventually: true
    }
  };
});

type.defineValues(function(options) {
  return {
    _ms: options.ms,
    _fn: options.fn,
    _runEventually: options.runEventually,
    _pending: null,
    _disabled: false,
    _throttle: null
  };
});

type.overrideMethods({
  toString: function() {
    return this._callEventually.toString();
  }
});

type.defineMethods({
  disable: function() {
    if (!this._disabled) {
      this._disabled = true;
      this._stop();
    }
  },
  _callEventually: function(context, args) {
    if (!this._disabled) {
      if (this._throttle != null) {
        this._setPending(context, args);
      } else {
        this._callImmediately(context, args);
      }
    }
  },
  _setPending: function(context, args) {
    if (this._runEventually) {
      this._pending = {
        context: context,
        args: args
      };
    }
  },
  _callImmediately: function(context, args) {
    this._fn.apply(context, args);
    this._throttle = setTimeout(this._onThrottleEnd, this._ms);
  },
  _stop: function() {
    clearTimeout(this._throttle);
    this._throttle = null;
    this._pending = null;
  }
});

type.defineBoundMethods({
  _onThrottleEnd: function() {
    var args, context, ref;
    this._throttle = null;
    if (this._pending) {
      ref = this._pending, context = ref.context, args = ref.args;
      this._pending = null;
      this._callImmediately(context, args);
    }
  }
});

module.exports = type.build();
